#! /usr/bin/perl
#########################
# Run test suite for Goat. From Goat's dir, just:
# t/run --list          => list all available tests
# t/run                 => run all tests
# t/run 3 7 11          => run only specified tests
#
# Coverage reports is in t/tmp/cover_db/coverage.html
# (if required with $coverage = 1 below)
#

use strict;
use warnings;

use Getopt::Long;
use FileHandle;

$ENV{PATH} = "$ENV{PATH}:../..";
$ENV{PERL5LIB} = "$ENV{PERL5LIB}:../..";

# All the test files are UTF8, so ignore locale settings
$ENV{LC_ALL} = "en_US.UTF-8";

my @tests;

my $coverage = 0; # Set to 1 to do code coverage analysis

my $perl_opts = ''; # Options passed to Perl
$perl_opts .= '-MDevel::Cover="-silent,on"' if $coverage;

push @tests, 

   # register: register some players with mutt alias
   # Tests REGISTER_1, REGISTER_2, REGISTER_3, REGISTER_4,
   # REGISTER_5
   { 'run' => "cp ../mutt1 mutt; cp ../ech_ffg_V3.txt .; perl $perl_opts ../../register --test mutt 2> out.0 ; perl $perl_opts ../../goat --list-players >> out.0",
       'test' => 'diff -u ../out.0 out.0',
       'doc' => 'Register players from mutt',
   },
   # register: register some players
   # Tests REGISTER_1, REGISTER_2, REGISTER_3, REGISTER_4,
   # REGISTER_5
   { 'run' => "cp ../players .; cp ../ech_ffg_V3.txt .; perl $perl_opts ../../register --test players 2> out.0b ; perl $perl_opts ../../goat --list-players >> out.0b",
       'test' => 'diff -u ../out.0 out.0b',
       'doc' => 'Register players with text file',
   },
   # pair: create a new round
   # Tests PAIR_1, PAIR_2, PAIR_3
   { 'run' => " export TEST_TIME=1122737400; cp ../ech_ffg_V3.txt . ; cp ../toperm_in.1 toperm; perl $perl_opts ../../pair --test > out.1 2>&1 ; perl $perl_opts ../../goat --status >> out.1",
       'test' => 'diff -u ../out.1 out.1',
       'doc' => 'New round',
   },
   # pair: fail because of odd number of players 
   # Tests PAIR_4
   { 'run' => "cp ../toperm_in.1 toperm; cp ../ech_ffg_V3.txt . ; " .
       "echo 'alias newplayer New Player <newplayer\@example.org> #6k' | perl $perl_opts ../../add_player > out.1b 2>&1 ; ".
       "perl $perl_opts ../../pair --test >> out.1b 2>&1 ; perl $perl_opts ../../goat --status >> out.1b",
       'test' => 'diff -u ../out.1b out.1b',
       'doc' => 'New round with odd number of players',
   },
   # pair: pair with a bye player
   # Tests PAIR_4
   { 'run' => "export TEST_TIME=1122737400; cp ../toperm_in.1 toperm; cp ../ech_ffg_V3.txt . ; " .
       "echo 'alias newplayer New Player <newplayer\@example.org> #6k' | perl $perl_opts ../../add_player > out.1c 2>&1 ; ".
       "perl $perl_opts ../../pair --test --bye newplayer\@example.org >> out.1c 2>&1 ; perl $perl_opts ../../goat --status >> out.1c",
       'test' => 'diff -u ../out.1c out.1c',
       'doc' => 'New round with bye player',
   },
   # pair: pair with handicap capping
   # Tests PAIR_5
   { 'run' => " export TEST_TIME=1122737400; cp ../ech_ffg_V3.txt . ; cp ../toperm_in.1c toperm; perl $perl_opts ../../pair --test > out.1m 2>&1 ; perl $perl_opts ../../goat --status > out.1m",
       'test' => 'diff -u ../out.1m out.1m',
       'doc' => 'Pair with handicap capping',
   },
   # pair: pair with a bye player, and unplayed games have
   # left the tournament (Normaly we pick bye players in
   # unplayed games in previous round; here, unplayed
   # players had unsubscribed)
   # Clement Beni and Mickael Zizard have both not played
   # and unregistered, so can't be picked for bye
   { 'run' => "export TEST_TIME=1122737400; cp ../toperm_in.1b toperm; cp ../ech_ffg_V3.txt . ; " .
       "perl $perl_opts ../../pair --test --bye random > out.1l 2>&1 ; perl $perl_opts ../../goat --status >> out.1l",
       'test' => 'diff -u ../out.1l out.1l',
       'doc' => 'New round with bye player and left unplayed',
   },
   # pair: pair with random bye player, send pairings
   # (sending is required to check $round->bye is set properly)
   { 'run' => "export TEST_TIME=1122737400; cp ../toperm_in.9 toperm; " .
       "cp ../ech_ffg_V3b.txt ech_ffg_V3.txt ; ".
       "perl $perl_opts ../../pair --test --bye random > out.1k 2>&1 ;".
       "perl $perl_opts ../../goat --status >> out.1k ; ".
       "perl $perl_opts ../../goat --test --send-pairings >> out.1k",
       'test' => 'diff -u ../out.1k out.1k',
       'doc' => 'New round with random bye player and send pairings',
   },
   # send pairings
   { 'run' => "export TEST_TIME=1122737400; cp ../toperm_in.2 toperm; " .
       "perl $perl_opts ../../goat --test --send-pairings > out.1g 2>&1 ; ",
       'test' => 'diff -u ../out.1g out.1g',
       'doc' => 'Send pairing e-mails with even players',
   },
   # send pairings (with bye)
   { 'run' => "export TEST_TIME=1122737400; cp ../toperm_in.2b toperm; " .
       "perl $perl_opts ../../goat --test --send-pairings > out.1h 2>&1 ; ",
       'test' => 'diff -u ../out.1h out.1h',
       'doc' => 'Send pairing e-mails with odd players',
   },
   # change a game (handicap + swap)
   { 'run' => "export TEST_TIME=1122737400; cp ../toperm_in.2b toperm; " .
       "perl $perl_opts ../../goat --swap joey\@example.org > out.1j 2>&1 ; ".
       "perl $perl_opts ../../goat --chhand joey\@example.org,5 > out.1j 2>&1 ; ".
       "perl $perl_opts ../../goat --status > out.1j 2>&1 ; " ,
       'test' => 'diff -u ../out.1j out.1j',
       'doc' => 'Change game: swap player and handicap',
   },
   # send unplayed game warning 
   { 'run' => "export TEST_TIME=1122737400; cp ../toperm_in.2c toperm; " .
       "perl $perl_opts ../../goat --test --send-unplayed > out.1i 2>&1 ; ",
       'test' => 'diff -u ../out.1i out.1i',
       'doc' => 'Send warning to unplayed games',
   },
   # del_game: remove a game
    { 'run' => "cp ../toperm_in.2 toperm; perl $perl_opts ../../del_game yves\@example.org > out.1d 2>&1 ; " .
        "perl $perl_opts ../../goat --status >> out.1d 2>&1",
      'test' => 'diff -u ../out.1d out.1d',
      'doc' => 'Remove a game',
  },
  # add_game: adds a game (with 2 new players)
   { 'run' => "cp ../toperm_in.2 toperm; " .
       "echo 'alias newplayer1 New Player <newplayer1\@example.org> #6k' | perl $perl_opts ../../add_player > out.1e 2>&1 ; ".
       "echo 'alias newplayer2 New Player2 <newplayer2\@example.org> #6k' | perl $perl_opts ../../add_player > out.1e 2>&1 ; ".
       "perl $perl_opts ../../add_game --black newplayer1\@example.org --white newplayer2\@example.org --handicap 2 >> out.1e 2>&1 ; perl $perl_opts ../../goat --status >> out.1e",
       'test' => 'diff -u ../out.1e out.1e',
       'doc' => 'Add a game to an existing round',
   },
   # del_player: removes a player
    { 'run' => "cp ../toperm_in.1 toperm; perl $perl_opts ../../del_player yves\@example.org > out.1f 2>&1 ; " .
        "perl $perl_opts ../../goat --list-all >> out.1f 2>&1",
      'test' => 'diff -u ../out.1f out.1f',
      'doc' => 'Remove a player',
  },

   
   
   # 1: challenges and timing
   # Test GOAT_1, GOAT_2, GOAT_3, GOAT_4
    { 'run' => "export TEST_TIME=1122737400; cp ../toperm_in.2 toperm; perl $perl_opts ../../goat --test --reminders > out.2 2>&1 ; " .
        "perl $perl_opts ../../goat --status >> out.2 2>&1",
      'test' => 'diff -u ../out.2 out.2',
      'doc' => 'Timing (reminders for challenges, results, games)',
  },

   # 1: HTML export
    { 'run' => "export TEST_TIME=1122737400; cp ../toperm_in.2 toperm; perl $perl_opts ../../goat --status > out.3 2>&1 ; ",
      'test' => 'diff -u ../toperm.3.html toperm.html',
      'doc' => 'HTML export',
  },

  # 5: result error on colour
    { 'run' => "export TEST_TIME=1122737400; cp ../letter_in.10 letter; cp ../toperm_in.2 toperm; cat letter | perl $perl_opts ../../mail_in -t > out.5",
      'test' => 'diff -u ../out.5 out.5',
      'doc' => 'wrong colour',
  },
    { 'run' => "export TEST_TIME=1122737400; cp ../letter_in.10b letter; cp ../toperm_in.10b toperm; cat letter | perl $perl_opts ../../mail_in -t > out.10b",
      'test' => 'diff -u ../out.10b out.10b',
      'doc' => 'colour in multipart body',
  },

  # 6: schedule error on date (reuse *.2 test files except out.6, as pairs shouldn't change)
    { 'run' => "export TEST_TIME=1122737400; cp ../letter_in.11 letter; cp ../toperm_in.2 toperm; cat letter | perl $perl_opts ../../mail_in -t > out.6",
      'test' => 'diff -u ../out.6 out.6',
      'doc' => 'schedule a game with invalid date',
  },
  # 7: schedule error on player (reuse *.2)
    { 'run' => "export TEST_TIME=1122737400; cp ../letter_in.12 letter; cp ../toperm_in.2 toperm; cat letter | perl $perl_opts ../../mail_in -t > out.7",
      'test' => 'diff -u ../out.7 out.7',
      'doc' => 'schedule a game with invalid player',
  },
  # 8: schedule error date in past (reuse *.5, and pairs_in.5
  # as pairs shouldn't change)
    { 'run' => "export TEST_TIME=1122737400; cp ../letter_in.3 letter; cp ../toperm_in.2 toperm; cat letter | perl $perl_opts ../../mail_in -t > out.8",
      'test' => 'diff -u ../out.8 out.8',
      'doc' => 'schedule a game in past',
  },
  # 10: We get a result!
    { 'run' => "export TEST_TIME=1122737400; cp ../letter_in.13 letter; cp ../toperm_in.2 toperm; cat letter | perl $perl_opts ../../mail_in -t > out.10",
      'test' => 'diff -u ../out.10 out.10',
      'doc' => 'Receive results in subject',
  },
  # Result in the body, with quoted printable encoding
    { 'run' => "export TEST_TIME=1122737400; cp ../letter_in.13b letter; cp ../toperm_in.13b toperm; cat letter | perl $perl_opts ../../mail_in -t > out.13b",
      'test' => 'diff -u ../out.13b out.13b',
      'doc' => 'Receive results in body',
  },
  # Result in the body, with base64 encoding
    { 'run' => "export TEST_TIME=1122737400; cp ../letter_in.13c letter; cp ../toperm_in.13c toperm; cat letter | perl $perl_opts ../../mail_in -t > out.13c",
      'test' => 'diff -u ../out.13c out.13c',
      'doc' => 'Receive results in body in base64',
  },
  # Result in the body, with nested parts
    { 'run' => "export TEST_TIME=1122737400; cp ../letter_in.13d letter; cp ../toperm_in.13d toperm; cat letter | perl $perl_opts ../../mail_in -t > out.13d",
      'test' => 'diff -u ../out.13d out.13d',
      'doc' => 'Receive results in body with nested parts',
  },
  # Receive an SGF: extract result and archive
    { 'run' => "export TEST_TIME=1122737400; cp ../letter_in.30 letter; cp ../toperm_in.2 toperm; cat letter | perl $perl_opts ../../mail_in -t > out.30 ; perl $perl_opts ../../goat --status >> out.30 2>&1",
      'test' => 'diff -u ../out.30 out.30',
      'doc' => 'Receive SGF',
  },
  # Receive an SGF: extract result and archive
    { 'run' => "export TEST_TIME=1122737400; cp ../letter_in.31 letter; cp ../toperm_in.30 toperm; cat letter | perl $perl_opts ../../mail_in -t > out.31 ; perl $perl_opts ../../goat --status >> out.31 2>&1",
      'test' => 'diff -u ../out.31 out.31',
      'doc' => 'Receive SGF with UTF8 names',
  },
  # Receive SGF with invalid date
    { 'run' => "export TEST_TIME=1122737400; cp ../letter_in.32 letter; cp ../toperm_in.31 toperm; cat letter | perl $perl_opts ../../mail_in -t > out.32 2>&1 ; perl $perl_opts ../../goat --status >> out.32 2>&1",
      'test' => 'diff -u ../out.32 out.32',
      'doc' => 'Receive SGF with invalid date',
  },
  # Receive large SGF (e.g. with Leelo review)
    { 'run' => "rm sgf/*; export TEST_TIME=1122737400; cp ../letter_in.33 letter; cp ../toperm_in.33 toperm; cat letter | perl $perl_opts ../../mail_in -t > out.33 2>&1 ; perl $perl_opts ../../goat --status >> out.33 2>&1 ; file sgf/2021-06-29*.sgf >> out.33",
      'test' => 'diff -u ../out.33 out.33',
      'doc' => 'Receive jumbo SGF',
  },
  # Receive large SGF (e.g. with Leelo review)
    { 'run' => "rm sgf/*; export TEST_TIME=1122737400; cp ../letter_in.33b letter; cp ../toperm_in.33 toperm; cat letter | perl $perl_opts ../../mail_in -t > out.33b 2>&1 ; perl $perl_opts ../../goat --status >> out.33b 2>&1 ; file sgf/2021-06-29*.sgf >> out.33b",
      'test' => 'diff -u ../out.33b out.33b',
      'doc' => 'Receive one-line jumbo SGF',
  },
  # Check for loops
    { 'run' => "export TEST_TIME=1122737400; cp ../letter_in.14 letter; cp ../toperm_in.2 toperm; cat letter | perl $perl_opts ../../mail_in -t > out.12",
      'test' => 'diff -u ../out.12 out.12',
      'doc' => 'Check for loops',
  },
  # Drop messages from postmasters (otherwise we'll loop
  # with them)
    { 'run' => "export TEST_TIME=1122737400; cp ../letter_in.15 letter; cp ../toperm_in.2 toperm; cat letter | perl $perl_opts ../../mail_in -t > out.13",
      'test' => 'diff -u ../out.13 out.13', 
      'doc' => 'Drop mail from postmasters',
  },
  # Drop messages with no from
    { 'run' => "export TEST_TIME=1122737400; cp ../letter_in.16 letter; cp ../toperm_in.2 toperm; cat letter | perl $perl_opts ../../mail_in -t > out.14",
      'test' => 'diff -u ../out.14 out.14',
      'doc' => 'Drop mail without from address',
  },
  # Scheduling, command in subject
    { 'run' => "export TEST_TIME=1122737400; cp ../letter_in.17 letter; cp ../toperm_in.2 toperm; cat letter | perl $perl_opts ../../mail_in -t > out.15b ; perl $perl_opts ../../goat --status >> out.15b 2>&1",
      'test' => 'diff -u ../out.15b out.15b',
      'doc' => 'Successful game scheduling',
  },
  # Scheduling, dd/MM/yyyy date format, summer time
    { 'run' => "export TEST_TIME=1122737400; cp ../letter_in.17b letter; cp ../toperm_in.2 toperm; cat letter | perl $perl_opts ../../mail_in -t > out.15d ; perl $perl_opts ../../goat --status >> out.15d 2>&1",
      'test' => 'diff -u ../out.15d out.15d',
      'doc' => 'Successful game scheduling with dd/MM/YYYY format, summer time',
  },
  # Scheduling, dd/MM/yyyy date format, winter time
    { 'run' => "export TEST_TIME=1122737400; cp ../letter_in.17c letter; cp ../toperm_in.2 toperm; cat letter | perl $perl_opts ../../mail_in -t > out.15e ; perl $perl_opts ../../goat --status >> out.15e 2>&1",
      'test' => 'diff -u ../out.15e out.15e',
      'doc' => 'Successful game scheduling with dd/MM/YYYY format, winter time',
  },
  # Scheduling with command in the body of the e-mail
    { 'run' => "export TEST_TIME=1122737400; cp ../letter_in.18 letter; cp ../toperm_in.2 toperm; cat letter | perl $perl_opts ../../mail_in -t > out.15 ; perl $perl_opts ../../goat --status >> out.15 2>&1",
      'test' => 'diff -u ../out.15 out.15',
      'doc' => 'game scheduling with command in body of mail (UTF8)',
  },
    { 'run' => "export TEST_TIME=1122737400; cp ../letter_in.18b letter; cp ../toperm_in.2 toperm; cat letter | perl $perl_opts ../../mail_in -t > out.15 ; perl $perl_opts ../../goat --status >> out.15 2>&1",
      'test' => 'diff -u ../out.15 out.15',
      'doc' => 'game scheduling with command in body of mail (ISO-8859-1)',
  },
    { 'run' => "export TEST_TIME=1122737400; cp ../letter_in.18c letter; cp ../toperm_in.2 toperm; cat letter | perl $perl_opts ../../mail_in -t > out.15 ; perl $perl_opts ../../goat --status >> out.15 2>&1",
      'test' => 'diff -u ../out.15 out.15',
      'doc' => 'game scheduling with command in body of mail (utf-8)',
  },
  # Scheduling, no location
    { 'run' => "export TEST_TIME=1122737400; cp ../letter_in.18d letter; cp ../toperm_in.2 toperm; cat letter | perl $perl_opts ../../mail_in -t > out.15c ; perl $perl_opts ../../goat --status >> out.15c 2>&1",
      'test' => 'diff -u ../out.15c out.15c',
      'doc' => 'Game scheduling with no location',
  },
  # Same test as previous, with multi-part e-mail
    { 'run' => "export TEST_TIME=1122737400; cp ../letter_in.19 letter; cp ../toperm_in.2 toperm; cat letter | perl $perl_opts ../../mail_in -t > out.15 ; perl $perl_opts ../../goat --status >> out.15 2>&1",
      'test' => 'diff -u ../out.15 out.15',
      'doc' => 'game scheduling with command in body of multi-part mail',
  },

  # 11: TOU output
  { 'run' => "export TEST_TIME=1122737400; cp ../toperm_in.6 toperm; perl $perl_opts ../../goat --tou full --test > out.200 2>&1",
      'test' => 'diff -u ../out.200 out.200',
      'doc' => 'Generate TOU',
  },
  # 11: TOU output for one single round (remove players who
  # didn't play, and still use players who got deleted)
  { 'run' => "export TEST_TIME=1122737400; cp ../toperm_in.7 toperm; perl $perl_opts ../../goat --tou --round 1 --test > out.201 2>&1",
      'test' => 'diff -u ../out.201 out.201',
      'doc' => 'Generate TOU for a single round',
  },

  # TOU output with previously unsubmitted results
  { 'run' => "export TEST_TIME=1122737400; cp ../toperm_in.14 toperm; perl $perl_opts ../../goat --tou --test > out.204 2>&1",
      'test' => 'diff -u ../out.204 out.204',
      'doc' => 'Generate TOU for several rounds with unsubmitted games',
  },

  # send results by mail, with a city
  { 'run' => "export TEST_TIME=1122737400; cp ../toperm_in.7 toperm; perl $perl_opts ../../goat --send-results --round 1 --test > out.202 2>&1",
      'test' => 'diff -u ../out.202 out.202',
      'doc' => 'Send TOU by e-mail, in-person',
  },

  # send results by mail, for Internet tournament (hybrid
  # only)
  { 'run' => "export TEST_TIME=1122737400; cp ../toperm_in.7 toperm; cp ../internet.cfg goat.cfg;  perl $perl_opts ../../goat --send-results --round 1 --test > out.203 2>&1",
      'test' => 'diff -u ../out.203 out.203',
      'doc' => 'Send TOU by e-mail, Internet',
  },


  # send results with previously unsubmitted resulsts by mail (this uses data from test out.204 above)
  { 'run' => "export TEST_TIME=1122737400; " . "
      cp ../toperm_in.14 toperm; ".
      "perl $perl_opts ../../goat --send-results --test > out.204b 2>&1",
      'test' => 'diff -u ../out.204b out.204b',
      'doc' => 'Send TOU by e-mail with unsubmitted games'
  },


  # Tests for mail_out
  # 16: mail_in_illegal
  { 'run' => "export TEST_TIME=1122737400; cp ../letter_in.1 letter; cat letter | perl $perl_opts ../../mail_in -t > out.70",
      'test' => 'diff -u ../out.70 out.70',
      'doc' => 'mail_out illegal mail and attach',
  },
  # Manual pairing management
  { 'run' => " export TEST_TIME=1122737400; cp ../toperm_in.1 toperm; ".
      "perl $perl_opts ../../add_round > out.21 2>&1 ; ".
      "perl $perl_opts ../../add_game --black polverini\@example.org --white joey\@example.org >> out.21 2>&1 ; ".
      "perl $perl_opts ../../add_game --black yves\@example.org --white lorl\@example.org >> out.21 2>&1 ; ".
      "perl $perl_opts ../../goat --status >> out.21",
      'test' => 'diff -u ../out.21 out.21',
      'doc' => 'Manual new round',
  },


  ;

use Test::More tests => 88;


mkdir "t/tmp";
chdir "t/tmp" || die "Can't chdir to my test directory";

system("cp ../../example.cfg ./goat.cfg");
unlink("toperm.lock");

system "cover -delete" if $coverage;
die "Unable to clear coverage analysis.\n" if $?;

{   # Number tests
    my $i = 1;
    map { $_->{'index'} = $i++ } @tests;
}

format test_list_top =
ID  | Description
----+-------------------------------------------------------------------------
.
format test_list =
@>> | @<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
$_->{'index'}, $_->{'doc'};
.

GetOptions(
    'list' => sub { 
        format_name STDOUT "test_list";
        format_top_name STDOUT "test_list_top";
        map { write; } @tests;
        exit 0;
    },
);

@tests = @tests[ map { $_ - 1 } @ARGV ] if @ARGV;

my @results;

foreach my $test ( @tests ) {
    my ($val,$name);

    print "running ".$test->{'index'}.": ".$test->{'doc'}."\n";

    # Reset configuration
    system("cp ../../example.cfg ./goat.cfg");

    my $cmd=$test->{'run'};
    $val=system($cmd);

    $name=$test->{'doc'}.' runs';
    ok($val == 0,$name);
    diag($test->{'run'}) unless ($val == 0);

    SKIP: {
        if ($val) {
            push @results, [ $test->{'index'}, $test->{'doc'}, $val ];
            skip ("Command didn't run, can't test the validity of its return",1);
        }
        $val=system($test->{'test'});	
        $name=$test->{'doc'}.' returns what is expected';
        ok($val == 0,$name);
        push @results, [ $test->{'index'}, $test->{'doc'}, $val ];
        unless ($val == 0) {
            diag ("Failed (retval=$val) on:");
            diag ($test->{'test'});
            diag ("Was created with:");
            diag ($test->{'run'});
        }
    }
}


format test_results_top =
ID  | Description                                                       | Status
----+-------------------------------------------------------------------+-------
.

format test_results = 
@>> | @<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< |   @>>
$_->[0], $_->[1], $_->[2] ? "NOK" : "OK"
.

format_name STDOUT "test_results";
format_top_name STDOUT "test_results_top";
map { write; } @results;

done_testing();

if ($coverage) {
    system "cover"; 
    die "Unable to generate coverage status.\n" if $?;
    warn "Coverage report generated\n";
}

chdir "../.." || die "Can't chdir back to my root";

0;
