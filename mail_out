#! /usr/bin/perl -w

# Goat: Gentil Organisateur et Administrateur de Tournois
# Copyright (C) 2006-2016  Yves Rutschle
# 
# This program is free software; you can redistribute it
# and/or modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later
# version.
# 
# This program is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
# PURPOSE.  See the GNU General Public License for more
# details.
# 
# The full text for the General Public License is here:
# http://www.gnu.org/licenses/gpl.html

use strict;

=head1 NAME

mail_out -- goat's e-mail sender

=head1 SYNOPSIS

mail_out [--mail-in-illegal <rcpt>,<file>]
         [--issue-challenge <black>,<white>,<handi>]
         [--remind-challenge <p1>,<p2>,<handi>,<final_date>]
         [--ask-results <p1>,<p2>]
         [--player-unknown <p1>]
         [--notify-schedule <b>,<w>,<handi>,<date>,<location>,<setter>]
         [--coming-up <b>,<w>,<handi>,<date>,<location>,<setter>]
         [--baddate <rcpt>,<date_str>]
         [--pastdate <rcpt>,<date_str>]
         [--give-results <p1>,<p2>,<reporter>,<winner>]
         [--badcolour <rcpt>,<colour_str>]
         [--attach <attachement>]

         [--no-send]

=head1 DESCRIPTION

Mail_out groups all of Goat's outgoing e-mail messages. This
concentrates all the e-mail management here, and allows for
easy translating or customising of outgoing messages.
(Translation support needs to be added though).

=cut

use Getopt::Long;
use Pod::Usage;
use MIME::Entity;
use Data::ICal;
use Data::UUID;
use DateTime;  # package libdatetime-perl
use DateTime::Locale; # package libdatetime-locale-perl
use DateTime::Format::ICal; 
use Data::ICal::Entry::Event;
use Template;
use POSIX;

# Check we have the right environment variables to find
# the modules, and add to @INC.
BEGIN {
    die "Environment variable GOAT_DIR and WORK_DIR must be defined\n" 
        if not defined $ENV{GOAT_DIR} or not defined $ENV{WORK_DIR};
    # This is necessary when called from .forward, in order
    # to find our .pm files.
    push @INC, $ENV{GOAT_DIR};
}

use GoatConfig;


my $LOGFILE = "$LOG_DIR/mail_out.log";

# record a line in a log file.
my ($logfile);
open $logfile, ">> $LOGFILE" or die "$LOGFILE: $!\n";
sub record {
    foreach (@_) {
        print $logfile (gmtime).": $_\n";
    }
}

my $tt = Template->new({ 
        INCLUDE_PATH => "$TEMPLATE_DIR",
    });

# Testing: to make some normally random things non-random
# No_send: to prevent sending mail
my ($help, $testing, $no_send); 

# Turn a UTC time_t into a localised timezoned string
sub utc2str {
    my $loc = DateTime::Locale->load($LOCALE);
    my $o = DateTime->from_epoch(epoch => $_[0], locale => $LOCALE, time_zone=>$TIMEZONE);
    my $date = $o->strftime("%A %d %B %Y %R");
}


=head2 OPTIONS

=over 4

=item --mail-in-illegal <rcpt>,<file>

Called from mail_in on an illegal or unknwon command. 

=item --remind-challenge <black,white,handicap,final_date>

Remind players who haven't scheduled their game yet to do
so.

B<final_date> is UTC UNIX date.

=item --ask-results <black,white,date>

Ask players who had scheduled their game at I<date> that
they need to publish their results.

=item --player-unknown <address>

Notifies I<address> that that address is unknown. (Game
schedules and results must be sent from the e-mail address
that Goat knows about).

=item --issue-challenge <black,white,handicap,limit date>

Sends players their pairing.

=item --notify-schedule <black,white,handicap,date,location,setter>

Notify players that I<setter> has scheduled the game to take
place on I<date> in I<location>

=item --coming-up <black,white,handicap,date,location>

Notify players that their game is scheduled to take
place on I<date> (soon) in I<location>

=item --baddate <rcpt,date>

Notify I<rcpt> that I<date> is invalid.

=item --pastdate <rcpt,date>

Notify I<rcpt> that I<date> is already past.

=item --give-results <black,white,result,reporter>

Notify the players that I<reporter> has reported the result
of the game.

=item --badcolour <rcpt,colour>

Notify I<rcpt> that I<colour> is not a valid color.

=cut
        # process_action() turns the parameters passed to the
        # option into a hash nameÑ• after names in
        # param_names, then if 'date' exists turns it to
        # string, then calls postprocess if it exists
        # passing the data hash has parameter, then
        # processes the specified template and mails the
        # result to the email addresses coming from the
        # named parameters.
        # The parameter names are passed to the template
        # processor so they can be used directly in
        # templates.
my %options = (
    'mail-in-illegal=s'         => process_action(
        param_names => [qw/rcpt file/],
        template => "badcmd.tt",
        postprocess => sub {
            my ($data) = @_;
            $data->{contents} = `cat $data->{file}`;
        },
        mailto => [qw/rcpt/],
    ),

    'remind-challenge=s'        => process_action(
        param_names => [qw/black white handi date/],
        template => "organise.tt",
        mailto => [qw/black white/],
    ),

    'ask-result=s'              => process_action(
        param_names => [qw/p1 p2 date/],
        template => "ask_result.tt",
        mailto => [qw/p1 p2/],
    ),

    'player-unknown=s'          => process_action(
        param_names => [qw/p1/],
        template => "unknown_address.tt",
        mailto => [qw/p1/],
    ),

    'issue-challenge=s'         => process_action(
        param_names => [qw/black white handi date/],
        template => "pairing.tt",
        mailto => [qw/black white/],
    ),

    'notify-schedule=s'         => process_action(
        param_names => [qw/ black white handi time location setter/],
        postprocess => sub {
            my ($data) = @_;

            $data->{date} = utc2str $data->{time};
            my $dtstart = DateTime::Format::ICal->format_datetime(DateTime->from_epoch(epoch => $data->{time}));
            my $dtend = DateTime::Format::ICal->format_datetime(DateTime->from_epoch(epoch => $data->{time} + 2 * 3600));
            my $ical = Data::ICal->new();
            my $ug = Data::UUID->new();
            my $event = Data::ICal::Entry::Event->new();
            $event->add_properties(
                summary => $TOURNAMENT_NAME,
                description => <<EOF,
noir: $data->{black}
blanc: $data->{white}
handicap: $data->{handi}
EOF
                dtstart => $dtstart,
                dtend => $dtend,
                location => $data->{location},
                uid => $ug->to_string($ug->create()),
            );
            if ($testing) {
                # Give variable / random fields fixed values
                $ical->add_properties(prodid => "Goat test suite");
                $event->add_properties(uid => "00000000-0000-0000-HELL-0WORLD000000");
            }
            $ical->add_entry($event);
            $data->{ics} = Encode::encode('UTF-8', $ical->as_string);
        },
        template => "scheduled.tt",
        mailto => [qw/black white/],
    ),

    'coming-up=s'               => process_action(
        param_names => [qw/black white handi date location/],
        template => "game_reminder.tt",
        mailto => [qw/black white/],
    ),

    'baddate=s'                 => process_action(
        param_names => [qw/p1 date_str/],
        template => "baddate.tt",
        mailto => [qw/p1/],
    ),

    'pastdate=s'                => process_action(
        param_names => [qw/p1 date_str/],
        template => "pastdate.tt",
        mailto => [qw/p1/],
    ),

    'give-results=s'            => process_action(
        param_names => [qw/black white result player/],
        template => "results.tt",
        postprocess => sub {
            my ($data) = @_;
            $data->{winner} = $data->{result} eq 'black' ?  $data->{black} : $data->{white};
        },
        mailto => [qw/black white/],
    ),

    'badcolour=s'               => process_action(
        param_names => [qw/p1 colour/],
        template => "badcolour.tt",
        mailto => [qw/p1/],
    ),

    'no-send'                   => sub { $testing = 1; $no_send = 1; },
    'help'                      => \$help,
);

GetOptions(%options) or die pod2usage();

die pod2usage(-verbose=>2) if defined $help;


# Makes a hash from a list
# $names: ref to list of names
# $vals: ref to list of vals
# Returns: hash of names => vals
# Hash key names are lower-cased
sub make_hash {
    my ($names, $vals) = @_;
    my %h;

    map {$h{lc shift @$names} = $_ } @$vals;
    return %h;
}


# Send mail to one or several recipients:
# sendmail ['bob@foo.com', 'joe@bar.com'], $template, # \%data;
sub sendmail {
    my ($r_to, $template, $r_data) = @_;

    my $body;

    # Mails are encoded in UTF-8 (see charset below)
    foreach my $k (keys %$r_data) {
        $r_data->{$k} = Encode::encode('UTF-8', $r_data->{$k});
    }

    $tt->process($template, $r_data, \$body) or die $tt->error;

    # Remove header lines
    $body =~ s/^(.*?)\n\n//s;
    my $hdrs = $1;
    my %hdr;
    foreach my $hdr (split /\n/, $hdrs) {
        $hdr =~ /(.*?): (.*)/;
        $hdr{lc $1} = $2;
    } 

    $r_to = [$r_to] unless ref $r_to;

    map { $_ = Encode::encode('UTF-8', $_) } @$r_to;

    my %mime_parms =  (
        'From' => $GOAT_ADDRESS,
        'Return-Path' => $GOAT_ADDRESS,
        'X-Loop' => $GOAT_ADDRESS,
        'To' => (join ',', @$r_to),
        'Subject' => $hdr{subject},
        'Type' => 'multipart/mixed',
    );
    if ($testing) {
        # When testing, make MIME marker deterministic, and
        # remove library version number
        $mime_parms{Boundary} = "---testing42ftwtesting";
        $mime_parms{'X-Mailer'} = "MIME-Tools with no version";
    }

    my $msg = MIME::Entity->build(%mime_parms);
    $msg->attach(
        'Charset' => 'UTF-8',
        'Data' => $body,
    );

    if (exists $r_data->{ics}) {
        $msg->attach(
            Type => 'text/calendar',
            Encoding => 'base64',
            Charset => 'UTF-8',
            Data => $r_data->{ics},
        );
    }

    if ($no_send) {
        # MIME::Entity does not output headers in a
        # deterministic order. We care when we test, so
        # output the headers separately and sorted
        # alphabetically
        print join "\n", sort split /\n/, $msg->header_as_string;

        print $msg->body_as_string;
        return;
    } 

    # Happy debugger warning: this code is never tested by
    # the test suite, because we don't want it to *actually*
    # send e-mail. This means one must be extra careful when
    # editing it, and that it'll appear as not covered
    # during test (because, well, it isn't).

    $msg->send;

    record("@$r_to: $hdr{subject}");
}



# Returns a callback that can be passed to GetOptions
use Data::Dumper;
sub process_action {
    my (%action) = @_;
    return sub {
        my ($action_name, $params) = @_;
        my @param_values = split /\s*,\s*/, $params;
        my %data = make_hash($action{param_names}, \@param_values);
        $data{date} = utc2str $data{date} if exists $data{date};
        $data{goat_address} = $GOAT_ADDRESS;
        $data{admin_address} = $ADMIN_ADDRESS;
        $data{tournament_name} = $TOURNAMENT_NAME;
        $data{subject_prefix} = 'goat';
        if (defined $SUBJECT_PREFIX) {
            $data{subject_prefix} = $SUBJECT_PREFIX;
        }
        my @to = sort map {$data{$_}} @{$action{mailto}};
        # copy mail to admin adress
        if (defined $ADMIN_FORWARD and $ADMIN_FORWARD eq 'yes') {
            @to = (@to, $ADMIN_ADDRESS);
        }
        $action{postprocess}->(\%data) if exists $action{postprocess};
        sendmail(\@to, $action{template}, \%data);
    }
}

record "No action: ARGV=@ARGV";
