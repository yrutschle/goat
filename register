#! /usr/bin/perl -w

# Goat: Gentil Organisateur et Administrateur de Tournois
# Copyright (C) 2006-2018  Yves Rutschle
# 
# This program is free software; you can redistribute it
# and/or modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later
# version.
# 
# This program is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
# PURPOSE.  See the GNU General Public License for more
# details.
# 
# The full text for the General Public License is here:
# http://www.gnu.org/licenses/gpl.html

=head1 NAME

 register -- processes tournament registrations

=head1 SYNOPSIS

 register [--getech] [-f file] inscrits

=head1 DESCRIPTION

WARNING! B<register> destroys any existing tournament file!
to add players to an existing file, use B<add_player>.

Tournament registration is done from a simple text file that
contains one line for each player.

The format of each line is as follows:

 <full name> <<email address>> # additional information

Additional information can be the licence number (useful in
case there are several players with the same name) or the
level (useful if a player hasn't played yet).

For example:

 Joe Bloggs <joe@blogs.net> # 0242149 3k

This will register Joe Bloggs, licence number 0242149, at
250 points. In most cases, the additional information does
not need to be specified.

B<register> knows how to parse B<mutt> alias lines directly,
so B<mutt> users just need to press 'C<a>' when reading the
mail of a player.  This registering method has three
advantages: there can be no mistake in e-mail addresses,
it's simple to do from the mail program, and the operator is
left with a mutt-usable list of players for further
mass-mailing.

B<register> takes the registered player list on its standard
input or command line, and outputs a Tournament object in a
file specified with -f.

B<--getech> forces downloading the echelle file.


=cut

# Processes registrations:
# - Input file: muttrc-syntax alias file; echelle file
# - Output file: Tournament object in file toperm

use strict;
use locale;
use Getopt::Long;
use Pod::Usage;

use Tournament;
use GoatLib;
use GoatConfig;

my $ECHELLE_FILE = "ech_ffg_new.txt";

my ($param_force_getech, $help);
GetOptions(
    'help' => \$help,
    'getech' => \$param_force_getech,
) or die pod2usage();

die pod2usage(-verbose=>2) if defined $help;

my @registered;

download_echelle($ECHELLE_FILE) if $param_force_getech;


while (<>) {
    next if /^#/ or /^$/;
    $_ = Encode::decode('UTF-8', $_);

    my $player = FFGPlayer->new_from_alias($_, $ECHELLE_FILE);

    next unless defined $player;

    warn $player->fullname.": player license: ".$player->status." is not allowed.\n" unless $player->is_licensed($TOURNAMENT_LICENSES);

    push @registered, $player;
}

# Sort by level
@registered = sort { $b->level <=> $a->level } @registered;

# Sort by registration level
#@registered = 
#   map { $_->[1] } 
#   sort { $b->[0] <=> $a->[0] } 
#   map { [(stone_to_level $_->registering_level), $_] }
#   @registered;

# Tournament object
my $t = new Tournament (
    time=> 60,
    size=> 19,
    komi=> 7.5,
    FFGPlayer=> \@registered,
);
$t->save($TOURNAMENT_FILE);

warn "Registered ".(scalar @registered)." players.\n";
