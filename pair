#! /usr/bin/perl -w

# Goat: Gentil Organisateur et Administrateur de Tournois
# Copyright (C) 2006-2018 Yves Rutschle
# 
# This program is free software; you can redistribute it
# and/or modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later
# version.
# 
# This program is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
# PURPOSE.  See the GNU General Public License for more
# details.
# 
# The full text for the General Public License is here:
# http://www.gnu.org/licenses/gpl.html

=head1 NAME

pair -- compute a new round in a tournament

=head1 SYNOPSIS

pair [--bye [<bye_player>|'random']] [--date <date>] [--verbose <1|2>] --file <toperm>

=head1 DESCRIPTION

I<pair> computes a new round based on the specified
tournament file. If the number of players in the file is
odd, it'll complain and you need to specify the e-mail
address of a 'bye' player, who won't take part in this
round. Alternatively you can specify 'random', in which case
the bye player will be randomly picked among those that
haven't played their game in the previous round (or among
all players, if all have played their game).

If the B<date> is specified, it will be displayed in
all reminders. If not specified, one month from now is
picked.

=cut

use strict;
use Algorithm::Pair::Best2;
use Pod::Usage;
use open ':locale';


use GoatLib;
use GoatConfig;
use Tournament;
use MailOut;
use Getopt::Long;

# Interpret command line
my ($param_bye, $param_final_date, $param_round, $help);
my $verbose = 0;
GetOptions(
    'help' => \$help,
    'date=s' => \$param_final_date,
    'bye=s' => \$param_bye,
    'round=i' => \$param_round,
    'verbose=i' => \$verbose,
) or die pod2usage();

die pod2usage(-verbose=>2) if defined $help;
my $Tournament = Tournament->load($TOURNAMENT_FILE);

update_ech($Tournament);


# Applies function to all games in a tournament. Game is
# passed as first parameter to function, e.g. remove all
# handicaps:
# map_game { $_[0]->handi(0) } $tournament
sub map_game (&@) {
    my ($cref, $tournament) = @_;

    foreach my $round ($Tournament->rounds) {
        foreach my $game ($round->games) {
            &$cref($game);
        }
    }
}

=head2 Pairing criteria

Pairing is based on the "best fit" algorithm (see
Pair::Algorithm, module on which this program is based).
Lower is better.  The following criteria are used:

=over 4

=item Level difference

Each point of difference in level decreases the desirability
of the pairing (remembering that there is 100 points per
stone). E.g. pairing a -875 with a -1450, this criterion
will produce a score of 575.

=item Already played

Players who have already played together during this
tournament get a +10000 to their pairing score.

=item Different club

Players who belong to the same club get points to encourage
variety 

=back

=cut

my %criteria = (
    level_diff => sub {
        my ($p1, $p2, $explain) = @_;

        my $diff = abs($p1->level - $p2->level);

        my $score = $diff;

        print "level_diff:\t".$p1->fullname." vs ".$p2->fullname.": $score\n" if $explain;

        return $score;
    },

    already_played => sub {
        my ($p1, $p2, $explain) = @_;

        my $played = 0;

        map_game {
            my $g = $_[0]; 
            $played++ if 
            $g->white->id eq $p1->id and $g->black->id eq $p2->id or
            $g->white->id eq $p2->id and $g->black->id eq $p1->id;
        } $Tournament;

        my $score = 10000 * $played;

        print "already_played:\t".$p1->fullname." vs ".$p2->fullname.": $score\n" if $explain;
        return $score;
    },

    same_club => sub {
        my ($p1, $p2, $explain) = @_;

        my $score = 0;
        $score = 500 if $p1->club eq $p2->club;

        print "same_club:\t".$p1->fullname." vs ".$p2->fullname.": $score\n" if $explain;
        return $score;
    },
);


sub score {
    my ($a, $b) = @_;

    my $explain = ($verbose >= 2);
    my $sum = 0;
    map { $sum += &$_($a, $b, $explain) } @criteria{ @PAIRING_CRITERIA };
    return $sum;
}

my $matchmaker;
$matchmaker = Algorithm::Pair::Best2->new(
    scoreSub => \&score,
    window => 6,
    progress => sub {
        my ($p1, $p2, $i1, $i2) = @_;
        if ($verbose >= 1) {
            my $score = $matchmaker->get_score($i1, $i2);
            print "Paired ".$p1->fullname." - ".$p2->fullname." ($score)\n";
        }
    }
);


# Validate that configured pairing criteria are correct
{
    die "No `pairing_criteria` defined in configuration file\n" unless @PAIRING_CRITERIA;
    my @errors = grep { not exists $criteria{$_} } @PAIRING_CRITERIA;
    if (@errors) {
        warn "pairing_criteria: " . (join " ", @errors ) . " not known\n";
        die "Valid entries: " . (join " ", keys %criteria) .
        "\n";
    }
}

# Returns a random array element; if testing, return first
# element
sub random_pick {
    my (@l) = @_;

    if ($CFG->{testing}) {
        return $l[0];
    } else {
        return $l[ rand @l ];
    }
}

# Test for odd number of players -- request to remove one
my @players = $Tournament->players;
my $bye;
if (1 & @players) {
    if (defined $param_bye and $param_bye eq 'random') {
        # Find players that haven't played their last game
        my @bye_candidates;
        if (defined $Tournament->curr_round) {
            my @games_not_played = grep { not ($_->is_finished or $_->is_canceled) } $Tournament->curr_round->games;
            @bye_candidates = map { $_->white, $_->black } @games_not_played;
        }
        # If all have played or tournament not started, select from all players
        @bye_candidates = @players unless @bye_candidates;

        $bye = random_pick @bye_candidates;
        warn "Randomly picking ".$bye->fullname." as bye player\n";;
        @players = grep { $_->id ne $bye->id } @players;
    } else {
        die "Odd number of players -- specify a bye with:\n".
        "\tpair --bye <email>\n" unless defined $param_bye;

        @players = grep { $_->email ne $param_bye } @players;
        die "$param_bye not found\n" if (1 & @players);
        $bye = $Tournament->find_player_by_email($param_bye);
    }
}

# Add all players to the pairing object. 
# (Sorted so they're already sort of close to each other wrt
# to the criteria)
foreach my $p (reverse sort {$a->level <=> $b->level} @players) {
    $matchmaker->add($p);
}


my $round_num = $param_round // (($Tournament->round_number || 0) + 1);
my $round = Round->new($round_num);
my $final_date;
if (defined $param_final_date) {
    $final_date = parse_datestr($param_final_date);
    die "Wrong date format $param_final_date." unless defined $final_date;
} else {
    $final_date = my_time() + 30 * 24 * 3600; # one month in the future
}
$round->final_date($final_date);
$round->bye($bye) if defined $bye;
$Tournament->add_round($round_num, $round);

my @res = $matchmaker->pick();
while (@res) {
    my $p1 = shift @res;
    my $p2 = shift @res;

    # Weaker player is black
    my ($black, $white) = ($p1->level > $p2->level) ? ($p2, $p1) : ($p1, $p2);
    my $handi = int(($white->level - $black->level)/100);
    $handi -= 1 if $handi > 0;
    my $g = new GoGame $black, $white, $handi;

    $Tournament->curr_round->add_game($g);
}

print $Tournament->curr_round->pairings_as_text;

$Tournament->save($TOURNAMENT_FILE);

my $mail_out = new MailOut(
    no_send => (defined $CFG->{testing}),
    testing => (defined $CFG->{testing}),
);
$mail_out->deadline(
    round => $round_num,
    time => $final_date,
);

