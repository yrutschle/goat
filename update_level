#! /usr/bin/perl -w

# Goat: Gentil Organisateur et Administrateur de Tournois
# Copyright (C) 2006-2016  Yves Rutschle
# 
# This program is free software; you can redistribute it
# and/or modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later
# version.
# 
# This program is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
# PURPOSE.  See the GNU General Public License for more
# details.
# 
# The full text for the General Public License is here:
# http://www.gnu.org/licenses/gpl.html

=head1 NAME

 update_level - 

=head1 SYNOPSIS

 update_level [-n|--no-act] [-no-getech] [-f file]

=head1 DESCRIPTION

B<update_level> downloads the echelle file, and updates the
players' levels in the specified tournament file.

While it's at it, it also update name and clubs if
necessary. 

This process relies on the licence field being correct.

=cut

# Processes registrations:
# - Input file: muttrc-syntax alias file; echelle file
# - Output file: Tournament object in file toperm

use strict;
use locale;
use Getopt::Long;
use Pod::Usage;
use Encode;

use GoatLib qw/download_echelle/;
use GoatConfig;
use Tournament;

my $ECHELLE_FILE = "ech_ffg_new.txt";

my ($param_file, $param_no_getech, $no_act, $help);
GetOptions(
    'help' => \$help,
    'file=s' => \$param_file,
    'no-getech' => \$param_no_getech,
    'n' => \$no_act,
    'no-act' => \$no_act,
) or die pod2usage();

die pod2usage(-verbose=>2) if defined $help;
die "No tournament file specified. Use -f <file>.\n" unless defined $param_file;


download_echelle($ECHELLE_FILE) unless $param_no_getech;

my $tournament = load Tournament "$param_file";
die "$param_file: $!\n" if not defined $tournament;

# Build a hash of all the players in the echelle file
my %all_players;
my $ech;
open $ech, $ECHELLE_FILE 
    or download_echelle($ECHELLE_FILE)  and open $ech, $ECHELLE_FILE
    or die "$ECHELLE_FILE: $!\n";

while (<$ech>) {
    next if /^#/;
    my $p = new_from_ech FFGPlayer decode 'ISO-8859-1', $_;
    next if not defined $p;
    $all_players{$p->id} = $p;
}

# Update registered players' level, name, club
foreach my $player ($tournament->players) {
    if (not exists $all_players{$player->id}) {
        warn $player->fullname . " not found in echelle file -- skipping\n";
        next;
    }

    my $ech_p = $all_players{$player->id};

    if ($ech_p->fullname ne $player->fullname) {
        warn "Updating name from ".$player->fullname." to ".$ech_p->fullname."\n";
        $player->givenname($ech_p->givenname);
        $player->familyname($ech_p->familyname);
    }
    if ($ech_p->level != $player->level) {
        warn $player->fullname.": changing from ".$player->level." to ".$ech_p->level."\n";
        $player->level($ech_p->level);

    }
    if ($ech_p->club ne $player->club) {
        warn $player->fullname.": updating club from ".$player->club." to ".$ech_p->club."\n";
        $player->club($ech_p->club);
    }
    if ($ech_p->license ne $player->license) {
        warn $player->fullname.": updating license from ".$player->license." to ".$ech_p->license."\n";
        $player->license($ech_p->license);
    }
    if ($ech_p->status ne $player->status) {
        warn $player->fullname.": license status changed to:". $ech_p->status."\n";
        $player->status($ech_p->status);
    }
    if (not $player->is_licensed($TOURNAMENT_LICENSES)) {
        warn $player->fullname.": player is not licensed.\n";
        warn $player->fullname.": player license: ".$player->status." is not allowed.\n"; 
    }
}

# Sort by registration level
#@registered = 
#   map { $_->[1] } 
#   sort { $b->[0] <=> $a->[0] } 
#   map { [(niv_num $_->registering_level), $_] }
#   @registered;

$tournament->save($param_file) unless $no_act;
