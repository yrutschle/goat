#! /usr/bin/perl -w

# Goat: Gentil Organisateur et Administrateur de Tournois
# Copyright (C) 2006-2018  Yves Rutschle
# 
# This program is free software; you can redistribute it
# and/or modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later
# version.
# 
# This program is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
# PURPOSE.  See the GNU General Public License for more
# details.
# 
# The full text for the General Public License is here:
# http://www.gnu.org/licenses/gpl.html

=head1 NAME

mail_in -- goat's e-mail input frontend

=head1 DESCRIPTION

Goat is designed to run under its own user, both for
convenience (e-mail can be delivered to goat easily) and
security (security breach in goat's code won't result in too
much damage).

B<mail_in> is called from goat's C<.forward> or from
B<imap_frontend>. It parses the input e-mail and calls goat
accordingly. B<mail_in> only handles delivery-related errors:
it doesn't check that arguments are valid.

=cut

use strict;
use Email::Filter; # package libemail-filter-perl
use Email::MIME;
use Mail::Address;
use Email::Valid;  # Package libemail-valid-perl
use Email::Reply;  # Package libemail-reply-perl
use Email::Sender::Simple qw/sendmail/; # Package libemail-sender-perl
use MIME::Parser;
use Data::UUID;

use Encode;
use Getopt::Long;

use GoatConfig;
use MailOut;

my $testing = '';

GetOptions(
    'test' => \$testing,
);

my $coverage = 0; # Add as a command line option later on?

my (@goat_opts);

my (@BIN_GOAT);
push @BIN_GOAT, $BIN_GOAT;
if ($testing) {
    @goat_opts = ('--test');
    if ($coverage) {
        @BIN_GOAT = ("perl", "-MDevel::Cover=\"-silent,on\"", $BIN_GOAT);
    }
}

my $mail_out = new MailOut( 
    testing => (defined $testing),
    no_send => (defined $testing),
);

#Where to log things? Mail_in needs to log errors, as there
#are no other way to report them.
my $LOGFILE = "$LOG_DIR/mail_in.log";

# record a line in a log file.
my ($logfile);
open $logfile, ">> $LOGFILE" or die "$LOGFILE: $!\n";
sub record {
    foreach (@_) {
        print $logfile (gmtime).": $_\n";
    }
}

# Records the mail in a temp file; returns the name of the
# file
sub make_tmpfile {
    my ($mail) = @_;
    my $tmp_fn = "$TMP_DIR/mail_in.$$";
    open my $fh, "> $tmp_fn" or do { 
        print "makeTmpfile $tmp_fn: $!\n";
        record "make_tmpfile $tmp_fn: $!";
        return;
    };
    print $fh $mail->simple->as_string;
    return $tmp_fn;
}

# Executes a command and log
sub my_exec {
    my (@exec) = @_;
    record "@exec";
    my $r = system @exec;
    if ($? == -1) {
        print "failed to execute: $!\n";
    } elsif ($? & 127) {
        printf "child died with signal %d, %s coredump\n",
        ($? & 127),  ($? & 128) ? 'with' : 'without';
    } else {
        if ($? >> 8) {
            #printf "child exited with value %d\n", $? >> 8;
        }
    }

}

# Searches attachments for an SGF. If one is found, pass it
# to goat
sub process_sgf {
    my ($from, $mail) = @_;

    my $mime = Email::MIME->new($mail->simple->as_string);

    foreach my $part ($mime->parts) {
        my $ct = $part->content_type // "";
        my $fn = $part->filename // "";
        if (($ct =~ /x-go-sgf/) or
            ($fn =~ /\.sgf$/)) {
            my $filename = "$TMP_DIR/sgf.$$";
            open my $fh, "> $filename" or record "tmpfile $filename: $!\n" and die "$filename: $!\n";
            print $fh $part->body;
            close $fh;
            my_exec($BIN_GOAT, @goat_opts, "--sgf-result", "$from,$filename");
            exit(0);
        }
    }
}

# Read incoming mail from stdin (see .forward)
my $mail = Email::Filter->new;

# First log the entire mail (maybe remove this when we gain
# confidence in the system?). We remove ESC to prevent
# terminal ANSI sequence injections.
record "Got mail";
my $mail_text = $mail->simple->as_string;
$mail_text =~ s/\e//g;
print $logfile $mail_text;

$mail->exit(0);

# avoid loops
my $loop = $mail->header('X-Loop');
if (defined $loop and $loop eq $GOAT_ADDRESS) {
    print "Loop detected -- dropping mail\n";
    record "Loop detected -- dropping mail";
    exit 0;
}

my $from = $mail->from;

if (defined $from) {
    # Unfold FROM field, otherwise Email::Valid doesn't work
    $from = join ' ', split /\n/, $from;
    $from = Email::Valid->address($from);
}

if (not defined $from) {
    # FROM mail address is not valid -- we probably can't
    # even send an error message, so just log it.
    print "Illegal sender\n";
    my $details = Email::Valid->details // "undef";
    record "Illegal sender ($details)";
    exit 0;
}

# if we get mail from postmaster, something went wrong
if ($from =~ /postmaster|daemon/i) {
    print "mail from postmaster -- dropping\n";
    record "mail from postmaster -- dropping\n";
    exit 0;
}

# If there is an SGF attached, extract it and pass to goat
process_sgf($from, $mail);

# Otherwise, search the mail for commands

=head1 Commands

The commands apply to the game in which the sender of the
mail plays.

=over 4

=item Subject: schedule|rendezvous <date>

Schedule my game for <date>

=over 4

=item result <winner>

Indicates who won the game.

=cut

# Tries to match a command in the line passed as parameter
# Returns the command to execute (as an array of parameters
# to pass to system()), or undef if no match
sub parse_command {
    my ($line) = @_;
    my $exec;
    my @exec;

    return if $line =~ /^>/;

    if ($line =~ /(schedule|rendez[ -]?vous|rdv)\S*\s+(.*)/i) {
        my ($cmd, $rest) = ($1, $2);
        my ($date, $place) = split /\s*,\s*/, $rest;

        $place //= 'KGS';

        @exec = ($BIN_GOAT, @goat_opts, "--schedule", "$from,$date,$place");
    } elsif ($line =~ /(r.*?sult).*(blanc|noir|white|black)?/i) { 
        my $winner = $2;
        # If we couldn't find the colour, pass the whole
        # command for the error message
        if (not defined $winner) {
            $winner = $line;
        }
        @exec = ($BIN_GOAT, @goat_opts, "--result", "$from,$winner");
    } 

    return @exec;
}

# First try to parse the mail subject line
my @exec = parse_command scalar decode("MIME-Header", $mail->subject);

# If that didn't work, try to parse each line of the e-mail
if (not @exec) {
    my @lines;

    # If it's multi-part, descend into each part
    my $mime = Email::MIME->new($mail->simple->as_string);
    my @parts = $mime->parts;
    if ($mime->parts) {
        foreach my $p ($mime->parts) {
            # body_str is decoded according to charset
            push @lines, split /\n/, $p->body_str;
        }
    }
    my @out = grep { @$_ } map { [ parse_command $_ ] } @lines;
    if (@out) {
        @exec = @{shift @out}; # keep first command
    }
}

if (not @exec) {
    my $tmp_fn = make_tmpfile $mail; # Pass the mail for bouncing

    # Instead, bounce an error message.
    record "No command found, bouncing mail";
    $mail_out->mail_in_illegal(
        rcpt => $from,
        file => $tmp_fn,
    );
    exit;
}


my_exec(@exec);

